# Title: SubToNotion - Automated Subdomain Recon
# Config: Add your target domain and url to the script. 
# Date: 17 April 2023
# Setting up Notion:
# Create a new database with two properties:
# 1. "URL" - property type: "URL"
# 2. "Date Discovered" - property type: "Date"

import os
import subprocess
import time
from notion_client import Client
from datetime import datetime

# Initialize Notion client
notion = Client(auth=os.environ["NOTION_API_KEY"])

# Replace with your database's URL property name and Notion page URL
database_url_property_name = "URL"
notion_database_url = "NOTION_DATABASE_URL"

# Functions to interact with Notion
def query_database(database_id):
    existing_records = {}
    results = notion.databases.query({"database_id": database_id}).get("results")
    for result in results:
        existing_records[result.properties[database_url_property_name].url] = result
    return existing_records

def add_to_database(database_id, url):
    new_page = {
        "URL": {"url": url},
        "Date Discovered": {"date": {"start": datetime.now().isoformat()}}
    }
    notion.pages.create(parent={"database_id": database_id}, properties=new_page)

def api_request_with_retry(func, *args, **kwargs):
    max_retries = 5
    retry_delay = 10
    for i in range(max_retries):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            if "API rate limit exceeded" in str(e) and i < max_retries - 1:
                time.sleep(retry_delay)
            else:
                raise e

# Get the database_id
database_id = api_request_with_retry(notion.databases.retrieve, notion_database_url)["id"]

# Get existing subdomains from the database
existing_records = api_request_with_retry(query_database, database_id)

# Save existing subdomains in a temporary file to use as a blacklist
with open("blacklist.txt", "w") as blacklist_file:
    for subdomain in existing_records:
        blacklist_file.write(subdomain + "\n")

# Call Amass and Assetfinder, and capture the output of subdomains
domain = "example.com"  # Replace with your domain
amass_output = subprocess.check_output(["amass", "enum", "-d", domain, "-bl", "blacklist.txt"]).decode().split("\n")
assetfinder_output = subprocess.check_output(["assetfinder", "--subs-only", domain, "--exclude-subs-file", "blacklist.txt"]).decode().split("\n")

# Remove the temporary blacklist file
os.remove("blacklist.txt")

subdomains = set(amass_output + assetfinder_output)

# Save new domains to the database if they are not already listed
for subdomain in subdomains:
    if subdomain and subdomain not in existing_records:
        api_request_with_retry(add_to_database, database_id, subdomain)

# Set up a cron job that will run this script every hour (outside the script)
# Add the following to crontab, etc:  0 * * * * /path/to/python /path/to/your/script.py
