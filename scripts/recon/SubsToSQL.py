import os
import sqlite3
import subprocess
import requests
from datetime import datetime

# Replace with your domain
domain = "example.com"

# Replace with your webhook URL
webhook_url = "WEBHOOK_URL"

# Set up SQLite database
conn = sqlite3.connect("subdomains.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS subdomains (
                    id INTEGER PRIMARY KEY,
                    url TEXT NOT NULL UNIQUE,
                    date_discovered TEXT NOT NULL,
                    notified INTEGER DEFAULT 0
                )''')
conn.commit()

# Functions to interact with SQLite database
def query_database():
    cursor.execute("SELECT url FROM subdomains")
    existing_records = [row[0] for row in cursor.fetchall()]
    return existing_records

def add_to_database(url):
    date_discovered = datetime.now().isoformat()
    cursor.execute("INSERT INTO subdomains (url, date_discovered) VALUES (?, ?)", (url, date_discovered))
    conn.commit()

def mark_as_notified(url):
    cursor.execute("UPDATE subdomains SET notified = 1 WHERE url = ?", (url,))
    conn.commit()

# Call webhook function
def call_webhook(subdomain):
    try:
        response = requests.post(webhook_url, json={"text": f"New subdomain found: {subdomain}"})
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"Error calling webhook: {e}")
        return False

# Get existing subdomains from the database
existing_records = query_database()

# Call Amass and Assetfinder, and capture the output of subdomains
amass_output = subprocess.check_output(["amass", "enum", "-d", domain]).decode().split("\n")
assetfinder_output = subprocess.check_output(["assetfinder", "--subs-only", domain]).decode().split("\n")

# Sanitize the list of subdomains
subdomains = set(amass_output + assetfinder_output)

# Save new domains to the database if they are not already listed
for subdomain in subdomains:
    if subdomain and subdomain not in existing_records:
        add_to_database(subdomain)

        # Call webhook and mark the record as notified if successful
        if call_webhook(subdomain):
            mark_as_notified(subdomain)

# Close the database connection
conn.close()

# Set up a cron job that will run this script every hour (outside the script)
# Add the following to crontab, etc: 
# 0 * * * * /path/to/python /path/to/your/script.py
