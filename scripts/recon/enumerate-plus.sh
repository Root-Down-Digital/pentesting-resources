#!/bin/bash

# Check if the security report file exists
if [ -f security_report.txt ]; then
  # If the file exists, get the next count value
  count=$(ls | grep -o "security_report_[0-9]*.txt" | sed 's/security_report_\([0-9]*\)\.txt/\1/' | sort -n | tail -1)
  count=$((count + 1))
else
  # If the file does not exist, start the count at 1
  count=1
fi

# First, we'll use nmap to scan the target system and save the output to a file
nmap <target_system> -oN nmap_output.txt

# Next, we'll use the ffuf tool to perform web content discovery on the target
# We'll use the -w option to specify a wordlist and the -u option to specify the target URL
cat nmap_output.txt | grep "open" | awk '{print $NF}' | while read line; do ffuf -w /usr/share/wordlists/dirb/common.txt -u $line/FUZZ >> ffuf_output.txt; done

# After that, we'll use Google dorks to search for vulnerabilities related to the ffuf findings
# We'll use the -q option to specify the search query and the -o option to save the results to a file
cat ffuf_output.txt | grep "200" | awk '{print $NF}' | while read line; do
  for dork_file in $(curl -sL https://github.com/Root-Down-Digital/pentesting-resources/tree/main/dorks | grep -o 'href=".*dorks.*.txt"' | grep -o '".*"' | tr -d '"'); do
    while read dork; do
      googler -q "$dork site:$line" -o googler_output.txt;
    done < <(curl -sL "https://github.com$dork_file")
  done
done

# We'll also use the gtfobins tool to find vulnerabilities related to the ffuf findings
while read line; do gtfobins $line >> gtfobins_output.txt; done < ffuf_output.txt

# Finally, we'll append all the information we've gathered to the security report file for further analysis
cat nmap_output.txt ffuf_output.txt googler_output.txt gtfobins_output.txt >> "security_report_$count.txt"

# Clean up the temporary files
rm nmap_output.txt ffuf_output.txt googler_output.txt gtfobins_output.txt
