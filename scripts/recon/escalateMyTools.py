#!/usr/bin/env python

import os
import subprocess

# Check if 'wget' is installed
def check_wget():
    return subprocess.call(["which", "wget"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0

# Create the 'transfers' folder if it doesn't exist
def create_transfers_folder():
    if not os.path.exists("transfers"):
        os.makedirs("transfers")
        print("Created 'transfers' folder.")

# Download the tools
def download_tools():
	tools = [
        {"name": "ASCService.exe", "url": "https://download.iobit.com/asc-free.exe"},
        {"name": "CVE-2017-0213_x64.exe", "url": "https://github.com/jra89/CVE-2017-0213/releases/download/1.0.0/CVE-2017-0213_x64.exe"},
        {"name": "HHUPD.EXE", "url": "https://download.microsoft.com/download/8/6/5/86547163-018d-4ffe-8da6-5d973d5e8911/Htmlhelp.EXE"},
        {"name": "Invoke-PowerShellTcp.ps1", "url": "https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1"},
        {"name": "linenum.sh", "url": "https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh"},
        {"name": "linpeas.sh", "url": "https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh"},
        {"name": "mcafee_sitelist_pwd_decrypt.py", "url": "https://raw.githubusercontent.com/ValtmaN1/mcafee_sitelist_pwd_decrypt/master/mcafee_sitelist_pwd_decrypt.py"},
        {"name": "MS10-059.exe", "url": "https://github.com/SecWiki/windows-kernel-exploits/raw/master/MS10-059/Compiled/MS10-059.exe"},
        {"name": "ms15-051_x64.exe", "url": "https://github.com/SecWiki/windows-kernel-exploits/raw/master/MS15-051/Compiled/ms15-051_x64.exe"},
        {"name": "MSFRottenPotato.exe", "url": "https://raw.githubusercontent.com/FuzzySecurity/PowerShell-Suite/master/MSFRottenPotato.ps1"},
        {"name": "NC.exe", "url": "https://eternallybored.org/misc/netcat/netcat-win32-1.11.zip"},
        {"name": "PowerUp.ps1", "url": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1"},
        {"name": "rottenpotato.exe", "url": "https://github.com/foxglovesec/RottenPotato/releases/download/v1.0/RottenPotato.exe"},
        {"name": "Seatbelt.exe", "url": "https://github.com/GhostPack/Seatbelt/releases/download/v1.0.0/Seatbelt.exe"},
        {"name": "SharpUp.exe", "url": "https://github.com/GhostPack/SharpUp/releases/download/v1.0.0/SharpUp.exe"},
        {"name": "winPEAS64.exe", "url": "https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/raw/master/winPEAS/winPEASexe/binaries/x64/Release/winPEASx64.exe"},
        {"name": "pentestmonkey-php-reverse-shell.php", "url": "https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php"},
        {"name": "cve-2016-5195-dirtycow.c", "url": "https://raw.githubusercontent.com/dirtycow/dirtycow.github.io/master/dirtyc0w.c"},
        {"name": "cve-2019-13272-exploit.sh", "url": "https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2019-13272/compile.sh"},
        {"name": "cve-2020-3452-exploit.py", "url": "https://raw.githubusercontent.com/Al1ex/CVE-2020-3452/main/cve-2020-3452-exploit.py"},
        {"name": "cve-2020-1472-exploit.py", "url": "https://raw.githubusercontent.com/dirkjanm/CVE-2020-1472/master/zerologon_test.py"},
        {"name": "cve-2021-3156-exploit.c", "url": "https://raw.githubusercontent.com/Bl4ckDr460n/CVE-2021-3156/main/exploit.c"},
        {"name": "cve-2021-1675-exploit.py", "url": "https://raw.githubusercontent.com/r0ckysec/CVE-2021-1675/main/PrintNightmare.py"}
    ]

# Check if the 'transfers' folder exists
def check_transfers_folder():
    if not os.path.exists("transfers"):
        os.makedirs("transfers")

# Download the tools into the 'transfers' folder
def download_tools():
    for tool in tools:
        file_name = os.path.join("transfers", tool["name"])
        url = tool["url"]

        print("Downloading {}...".format(file_name))
        subprocess.call(["wget", "-O", file_name, url])
    
        # Check if the download was successful
        if os.path.exists(file_name):
            print("{} downloaded successfully.".format(file_name))
        else:
            print("Error downloading {}. Please check the URL and try again.".format(file_name))

# Main function
def main():
    check_transfers_folder()
    download_tools()

if __name__ == "__main__":
	main()
