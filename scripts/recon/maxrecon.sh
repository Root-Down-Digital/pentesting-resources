#!/bin/bash
#This is a comprehensive reconnaissance script that chains together various tools to perform reconnaissance on a given domain. It performs subdomain enumeration, port scanning, directory brute-forcing, parameter fuzzing, and vulnerability scanning. Note that some tools require additional installations.


# Take a domain as an argument
if [ -z $1 ]; then
    echo "Usage: $0 domain.com"
    exit 1
fi

# Install necessary tools
sudo apt-get update
sudo apt-get install -y jq nmap

if ! command -v go &> /dev/null
then
    echo "Go is not installed. Installing..."
    sudo apt-get install -y golang-go
else
    echo "Go is already installed."
fi

if ! command -v git &> /dev/null
then
    echo "Git is not installed. Installing..."
    sudo apt-get install -y git
else
    echo "Git is already installed."
fi

if ! command -v cargo &> /dev/null
then
    echo "Cargo is not installed. Installing..."
    curl <https://sh.rustup.rs> -sSf | sh -s -- -y
    export PATH=$HOME/.cargo/bin:$PATH
else
    echo "Cargo is already installed."
fi

if ! command -v assetfinder &> /dev/null
then
    echo "assetfinder is not installed. Installing..."
    go get -u github.com/tomnomnom/assetfinder
else
    echo "assetfinder is already installed."
fi

if ! command -v amass &> /dev/null
then
    echo "amass is not installed. Installing..."
    go get -u github.com/OWASP/Amass/v3/...
else
    echo "amass is already installed."
fi

if ! command -v subfinder &> /dev/null
then
    echo "subfinder is not installed. Installing..."
    go get -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder
else
    echo "subfinder is already installed."
fi

if ! command -v findomain &> /dev/null
then
    echo "findomain is not installed. Installing..."
    git clone <https://github.com/Findomain/Findomain.git>
    cd Findomain
    cargo build --release
    sudo cp target/release/findomain /usr/bin/
    cd ..
else
    echo "findomain is already installed."
fi

if ! command -v httprobe &> /dev/null
then
    echo "httprobe is not installed. Installing..."
    go get -u github.com/tomnomnom/httprobe
else
    echo "httprobe is already installed."
fi

if ! command -v ffuf &> /dev/null
then
    echo "ffuf is not installed. Installing..."
    go get -u github.com/ffuf/ffuf
else
    echo "ffuf is already installed."
fi

if ! command -v gau &> /dev/null
then
    echo "gau is not installed. Installing..."
    go get -u github.com/lc/gau
else
    echo "gau is already installed."
fi

if ! command -v qsreplace &> /dev/null
then
    echo "qsreplace is not installed. Installing..."
    go get -u github.com/tomnomnom/qsreplace
else
    echo "qsreplace is already installed."
fi

if ! command -v nuclei &> /dev/null
then
    echo "nuclei is not installed. Installing..."
    GO111MODULE=on go get -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei
else
    echo "nuclei is already installed."
fi

# Create directories for output
if [ ! -d "$1" ]; then
    mkdir $1
fi
if [ ! -d "$1/recon" ]; then
    mkdir $1/recon
fi

# Subdomain enumeration
echo "[+] Starting subdomain enumeration..."
assetfinder $1 | sort -u | httprobe -s -p https:443 | sed 's/https\\\\?:\\\\/\\\\///' | tr -d ': 443' >> $1/recon/alive.txt
amass intel -d $1 -whois -active -o $1/recon/amass.txt
cat $1/recon/amass.txt | awk '{print $2}' | sort -u | httprobe -s -p https:443 | sed 's/https\\\\?:\\\\/\\\\///' | tr -d ': 443' >> $1/recon/alive.txt
subfinder -d $1 -o $1/recon/subfinder.txt
cat $1/recon/subfinder.txt | sort -u | httprobe -s -p https:443 | sed 's/https\\\\?:\\\\/\\\\///' | tr -d ': 443' >> $1/recon/alive.txt
findomain -t $1 -u $1/recon/findomain.txt
cat $1/recon/findomain.txt | sort -u | httprobe -s -p https:443 | sed 's/https\\\\?:\\\\/\\\\///' | tr -d ': 443' >> $1/recon/alive.txt
curl -s "<https://crt.sh/?q=%25.$1&output=json>" | jq -r '.[].name_value' | sed 's/\\\\*\\\\.//g' | sort -u | httprobe -s -p https:443 | sed 's/https\\\\?:\\\\/\\\\///' | tr -d ': 443' >> $1/recon/alive.txt
cat $1/recon/alive.txt | sort -u >> $1/recon/final.txt

# Port scanning
echo "[+] Starting port scanning..."
nmap -sS -T4 -p- -oA $1/recon/nmap $1
cat $1/recon/nmap.nmap | grep 'open' | awk '{print $1}' | tr -d 'Nmap' | tr -d '()' | tr -d '/' | sort -u | awk '{print "https://"$1}' >> $1/recon/alive.txt
cat $1/recon/alive.txt | sort -u >> $1/recon/final.txt

# Directory brute-forcing
echo "[+] Starting directory brute-forcing..."
ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u <https://$1/FUZZ> -mc 200 -t 100 -o $1/recon/ffuf.txt
ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u <https://$1/FUZZ?param=VALUE> -mc 200 -t 100 -o $1/recon/ffuf_params.txt

# Parameter fuzzing
echo "[+] Starting parameter fuzzing..."
gau $1 | grep -E "\\\\.php|\\\\.aspx|\\\\.jsp|\\\\.json" | qsreplace VALUE | while read url; do ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u $url -mc 200 -t 100 -o $1/recon/ffuf_params.txt ; done

# Vulnerability scanning
echo "[+] Starting vulnerability scanning..."
nuclei -l $1/recon/final.txt -t cves/ -t default-logins/ -t exposed-panels/ -t exposures/ -t files/ -t generic-detections/ -t misconfigurations/ -t takeovers/ -t technologies/ -t tokens/ -t workflows/ -t vulnerabilities/

